'use client';

import { useEffect, useState } from 'react';

type Transaction = {
  transaction_code: string;
  transaction_date: string;
  transaction_status: string;
  transaction_details: {
    ticket: {
      ticket_name: string;
    };
  }[];
};

export default function PaymentHistoryPage() {
  const [data, setData] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    if (!user?.user_id) {
      setLoading(false); // âœ… stop loading kalau user_id tidak ada
      return;
    }

    fetch(`/api/user/transaction/route?user_id=${user.user_id}`)
      .then((res) => res.json())
      .then((result) => {
        console.log("HASIL DARI API:", result); // Debug tambahan
        setData(result);
      })
      .catch((err) => {
        console.error("Gagal fetch data transaksi:", err);
        setData([]);
      })
      .finally(() => setLoading(false));
  }, []);

  console.log("DATA FINAL:", data);

  return (
    <div className="p-8 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Riwayat Pembelian Tiket</h1>

      {loading ? (
        <p>Memuat data...</p>
      ) : data.length === 0 ? (
        <p className="text-gray-500">Belum ada transaksi.</p>
      ) : (
        <div className="space-y-4">
          {data.map((trx, index) => (
            <div key={index} className="border p-4 rounded shadow-sm">
              <p className="font-semibold">Kode Transaksi: {trx.transaction_code}</p>
              <p>Tanggal: {new Date(trx.transaction_date).toLocaleString('id-ID')}</p>
              <p>Status: <span className={
                trx.transaction_status === 'paid' ? 'text-green-600 font-semibold' :
                  trx.transaction_status === 'pending' ? 'text-yellow-600 font-semibold' :
                    'text-red-600 font-semibold'
              }>
                {trx.transaction_status.toUpperCase()}
              </span></p>
              <p>Nama Tiket: {trx.transaction_details[0]?.ticket?.ticket_name || '-'}</p>

              {trx.transaction_status === 'paid' && (
                <a
                  href={`/api/ticket/pdf?id=${trx.transaction_code}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <button className="bg-green-600 text-white px-4 py-1 rounded mt-2 hover:bg-green-700">
                    Download Tiket
                  </button>
                </a>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// // app/checkout/page.tsx (atau sesuaikan path-mu)
// "use client";

// import { useState, useEffect } from "react";
// import type { MidtransTransactionResult } from "@/types/midtrans";

// export default function CheckoutPage() {
//   useEffect(() => {
//     const script = document.createElement('script');
//     script.src = 'https://app.sandbox.midtrans.com/snap/snap.js';
//     script.setAttribute('data-client-key', process.env.NEXT_PUBLIC_MIDTRANS_CLIENT_KEY!);
//     document.body.appendChild(script);
//     return () => {
//       document.body.removeChild(script);
//     };
//   }, []);

//   const [loading, setLoading] = useState(false);

//   const handlePayment = async () => {
//     setLoading(true);

//     const ticket_id = localStorage.getItem("selected_ticket_id");
//     if (!ticket_id) {
//       alert("Tiket belum dipilih");
//       return;
//     }
//     const order_id = `ORDER-${Date.now()}`;

//     const response = await fetch("/api/payment/tokenize", {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({ order_id, ticket_id }), // kirim ticket_id
//     });


//     try {
//       const response = await fetch("/api/payment/tokenize", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ order_id, amount }),
//       });

//       const data = await response.json();

//       // Debugging response
//       console.log('Response from API:', data);

//       if (data.token_id) {
//         // Snap will auto popup
//         window.snap.pay(data.token_id, {
//           onSuccess: (result: MidtransTransactionResult) => {
//             console.log("Payment success:", result);
//           },
//           onPending: (result: MidtransTransactionResult) => {
//             console.log("Payment pending:", result);
//           },
//           onError: (error: Error) => {
//             console.error("Payment error:", error);
//           },
//           onClose: () => {
//             console.log("User closed payment popup");
//           },
//         });
//       } else {
//         console.error("No token received:", data);
//       }
//     } catch (error) {
//       console.error("Failed to fetch payment token:", error);
//     }

//     if (typeof window.snap === "undefined") {
//       console.error("Midtrans snap.js not loaded yet");
//       return;
//     }

//     setLoading(false);
//   };


//   return (
//     <div className="p-8">
//       <h1 className="text-2xl font-bold mb-4">Checkout Tiket Wisata</h1>
//       <button
//         className="bg-blue-600 text-white px-4 py-2 rounded"
//         onClick={handlePayment}
//         disabled={loading}
//       >
//         {loading ? "Processing..." : "Bayar Sekarang"}
//       </button>
//     </div>
//   );
// }
